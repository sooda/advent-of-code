begin:
	#00000: [   3, 1033]              in    r_in                    [ 249]
	#00002: [1008, 1033,    1, 1032]  eq    r_in      1 =>     r0   |
	#00006: [1005, 1032,   31]        jnz     r0     31             |
	input r_in;
	if r_in == 1 {
		// north
		r0 = r_in == 1;
		#00031: [ 102,    1, 1034, 1039]  mul      1     r1 =>     r6   [   6]
		#00035: [1002, 1036,    1, 1041]  mul     r3      1 =>     r8   |
		#00039: [1001, 1035,   -1, 1040]  add     r2     -1 =>     r7   |
		#00043: [1008, 1038,    0, 1043]  eq      r5      0 =>     ra   |
		#00047: [ 102,   -1, 1043, 1032]  mul     -1     ra =>     r0   |
		#00051: [   1, 1037, 1032, 1042]  add     r4     r0 =>     r9   |
		#00055: [1106,    0,  124]        jz       0    124             |
		r6 = r1;
		r8 = r3;
		r7 = r2 - 1;
		ra = r5 == 0;
		r0 = -ra;
		r9 = r4 + r0;
		goto label_124;
	#00009: [1008, 1033,    2, 1032]  eq    r_in      2 =>     r0   |
	#00013: [1005, 1032,   58]        jnz     r0     58             |
	} else if r_in == 2 {
		// south
		r0 = r_in == 2;
		#00058: [1002, 1034,    1, 1039]  mul     r1      1 =>     r6   [  13]
		#00062: [ 102,    1, 1036, 1041]  mul      1     r3 =>     r8   |
		#00066: [1001, 1035,    1, 1040]  add     r2      1 =>     r7   |
		#00070: [1008, 1038,    0, 1043]  eq      r5      0 =>     ra   |
		#00074: [   1, 1037, 1038, 1042]  add     r4     r5 =>     r9   |
		#00078: [1105,    1,  124]        jnz      1    124             |
		r6 = r1;
		r8 = r3;
		r7 = r2 + 1;
		ra = r5 == 0;
		r9 = r4 + r5;
	#00016: [1008, 1033,    3, 1032]  eq    r_in      3 =>     r0   |
	#00020: [1005, 1032,   81]        jnz     r0     81             |
	} else if r_in == 3 {
		// west
		r0 = r_in == 3;
		#00081: [1001, 1034,   -1, 1039]  add     r1     -1 =>     r6   [  20]
		#00085: [1008, 1036,    0, 1041]  eq      r3      0 =>     r8   |
		#00089: [ 102,    1, 1035, 1040]  mul      1     r2 =>     r7   |
		#00093: [ 102,    1, 1038, 1043]  mul      1     r5 =>     ra   |
		#00097: [1002, 1037,    1, 1042]  mul     r4      1 =>     r9   |
		#00101: [1105,    1,  124]        jnz      1    124             |
		r6 = r1 - 1;
		r8 = r3 == 0;
		r7 = r2;
		ra = r5;
		r9 = r4;
	} else if r_in == 4 {
		// east
		r0 = r_in == 4;
		#00104: [1001, 1034,    1, 1039]  add     r1      1 =>     r6   [  27]
		#00108: [1008, 1036,    0, 1041]  eq      r3      0 =>     r8   |
		#00112: [ 102,    1, 1035, 1040]  mul      1     r2 =>     r7   |
		#00116: [ 102,    1, 1038, 1043]  mul      1     r5 =>     ra   |
		#00120: [1002, 1037,    1, 1042]  mul     r4      1 =>     r9   |
		r6 = r1 + 1;
		r8 = r3 == 0;
		r7 = r2;
		ra = r5;
		r9 = r4;
	} else {
		r0 = 0;
		stop;
	}

label_124:
	#00124: [1006, 1039,  217]        jz      r6    217             [  55,   78,  101]
	if r6 != 0 {
		#00127: [1006, 1040,  217]        jz      r7    217             |
		if r7 != 0 {
			#00130: [1008, 1039,   40, 1032]  eq      r6     40 =>     r0   |
			#00134: [1005, 1032,  217]        jnz     r0    217             |
			r0 = r6 == 40;
			if r6 != 40 {
				#00137: [1008, 1040,   40, 1032]  eq      r7     40 =>     r0   |
				#00141: [1005, 1032,  217]        jnz     r0    217             |
				r0 = r7 == 40;
				if r7 != 40 {
					#00144: [1008, 1039,   33, 1032]  eq      r6     33 =>     r0   |
					#00148: [1006, 1032,  165]        jz      r0    165             |
					r0 = r6 == 33;
					if r6 == 33 {
						#00151: [1008, 1040,   35, 1032]  eq      r7     35 =>     r0   |
						#00155: [1006, 1032,  165]        jz      r0    165             |
						r0 = r7 == 35;
						if r7 == 35 {
							#00158: [1101,    2,    0, 1044]  add      2      0 =>     rb   |
							#00162: [1106,    0,  224]        jz       0    224             |
							// oxygen is at 35,33 or 33,35
							rb = 2;
							goto out_224;
						} else {
							goto out_165;
						}
					} else {
						goto out_165;
					}
out_165:
					#00165: [   2, 1041, 1043, 1032]  mul     r8     ra =>     r0   [ 148,  155]
					#00169: [1006, 1032,  179]        jz      r0    179             |
					r0 = r8 * ra;
					if r8 * ra != 0 {
						#00172: [1101,    1,    0, 1044]  add      1      0 =>     rb   |
						#00176: [1106,    0,  224]        jz       0    224             |
						rb = 1;
						goto out_224;
					} else {
						#00179: [   1, 1041, 1043, 1032]  add     r8     ra =>     r0   [ 169]
						#00183: [1006, 1032,  217]        jz      r0    217             |
						r0 = r8 + ra;
						if r8 + ra != 0 {
							#00186: [   1, 1042, 1043, 1032]  add     r9     ra =>     r0   |
							#00190: [1001, 1032,   -1, 1032]  add     r0     -1 =>     r0   |
							#00194: [1002, 1032,   39, 1032]  mul     r0     39 =>     r0   |
							#00198: [   1, 1032, 1039, 1032]  add     r0     r6 =>     r0   |
							#00202: [ 101,   -1, 1032, 1032]  add     -1     r0 =>     r0   |
							#00206: [ 101,  252, 1032,  211]  add    252     r0 => [ 211]   |
							#00210: [1007,    0,   37, 1044]  gt  [   0]     37 =>     rb   |
							#00214: [1105,    1,  224]        jnz      1    224             |
							/*
							r0 = r9 + ra;
							r0 -= 1;
							r0 *= 39;
							r0 += r6;
							r0 -= 1;
							a211 = r0 + 252;
							rb = mem[r0] > 37;
							*/
							r0 = (r9 + ra - 1) * 39 + r6 - 1;
							a211 = r0 + 252;
							rb = mem[r0] > 37;
							goto out_224;
						} else {
							goto out_217;
						}
					}
				} else {
					goto out_217;
				}
			} else {
				goto out_217;
			}
		} else {
			goto out_217;
		}
	} else {
		goto out_217;
	}

out_217:
	rb = 0;
	goto out_224;
out_224:
#00224: [1006, 1044,  247]        jz      rb    247             [ 162,  176,  214,  221]
	if rb != 0 {
		#00227: [ 101,    0, 1039, 1034]  add      0     r6 =>     r1   |
		#00231: [ 101,    0, 1040, 1035]  add      0     r7 =>     r2   |
		#00235: [ 102,    1, 1041, 1036]  mul      1     r8 =>     r3   |
		#00239: [1001, 1043,    0, 1038]  add     ra      0 =>     r5   |
		#00243: [1002, 1042,    1, 1037]  mul     r9      1 =>     r4   |
		r1 = r6;
		r2 = r7;
		r3 = r8;
		r5 = ra;
		r4 = r9;
	}
out_247:
	output rb;
	goto begin;


